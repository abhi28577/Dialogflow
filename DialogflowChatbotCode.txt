// See https://github.com/dialogflow/dialogflow-fulfillment-nodejs
// for Dialogflow fulfillment library docs, samples, and to report issues
'use strict';

const axios = require('axios');

const functions = require('firebase-functions');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');
 
process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements
 
exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
  const agent = new WebhookClient({ request, response });
  console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
  console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
  
/*  const authorize = JSON.stringify({
  'email': 'abhishek.paspuleti@nennebotic.com',
  'password': 'Abhi@28577',
  'expire_in': 3600
});
 
 const Question = JSON.stringify(request.body.queryResult.queryText);
 console.log('Question:'+ Question);
 const query = {
 "queries": [
   Question
 ]
};
  
var config = {
  method: 'post',
  url: 'https://api.haystack-hub.com/api/v1/auth/token',
  headers: { 
    'Content-Type': 'application/json'
  },
  data : authorize
};
  
 axios(config)
  .then(function (response) {
    //console.log(JSON.stringify(response.data));
    if(response.data.access_token)
      console.log('Token:' + response.data.access_token);

      if(response.data.access_token)
      {
      config = {
          method: 'post',
          url: 'https://api.haystack-hub.com/api/v1/workspaces/default/search',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + response.data.access_token
          },
          data : query
        };

        axios(config)
          .then(function (response) {
          const SearchAnswer = response.data;          
          console.log('Answer:' + JSON.stringify(SearchAnswer.results[0].answers[0].answer));          
          const TestVar=JSON.stringify(SearchAnswer.results[0].answers[0].answer);          
        });
     }
  });
*/  
  function welcome(agent) {
    agent.add(`Welcome to my agent!`);
  }
 
  function fallback(agent) {
    agent.add(`I didn't understand`);
    agent.add(`I'm sorry, can you try again?`);
  }
  
  
  function countrycapital(agent){
    //console.log('Test:' + TestVar);
   	//agent.add(TestVar);
    
    const authorize = JSON.stringify({
  	'email': 'abhishek.paspuleti@nennebotic.com',
  	'password': 'Abhi@28577',
  	'expire_in': 3600
	});
 
 	const Question = JSON.stringify(request.body.queryResult.queryText);
 	console.log('Question:'+ Question);
 	const query = {
 	"queries": [
   	Question
 	]
	};
  
  var config = {
    method: 'post',
    url: 'https://api.haystack-hub.com/api/v1/auth/token',
    headers: { 
      'Content-Type': 'application/json'
    },
    data : authorize
  };  
      
  return axios(config).then(function (response) {
    //console.log(JSON.stringify(response.data));
    if(response.data.access_token)
      console.log('Token:' + response.data.access_token);

      if(response.data.access_token)
      {
      config = {
          method: 'post',
          url: 'https://api.haystack-hub.com/api/v1/workspaces/default/search',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + response.data.access_token
          },
          data : query
        };

       return axios(config).then(function (response) {
          const SearchAnswer = response.data;          
          console.log('Answer:' + JSON.stringify(SearchAnswer.results[0].answers[0].answer));          
          //var TestVar=JSON.stringify(SearchAnswer.results[0].answers[0].answer);
          agent.add(SearchAnswer.results[0].answers[0].answer);
        });
     }
  });  
    
  }

  // // Uncomment and edit to make your own intent handler
  // // uncomment `intentMap.set('your intent name here', yourFunctionHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function yourFunctionHandler(agent) {
  //   agent.add(`This message is from Dialogflow's Cloud Functions for Firebase editor!`);
  //   agent.add(new Card({
  //       title: `Title: this is a card title`,
  //       imageUrl: 'https://developers.google.com/actions/images/badges/XPM_BADGING_GoogleAssistant_VER.png',
  //       text: `This is the body text of a card.  You can even use line\n  breaks and emoji! üíÅ`,
  //       buttonText: 'This is a button',
  //       buttonUrl: 'https://assistant.google.com/'
  //     })
  //   );
  //   agent.add(new Suggestion(`Quick Reply`));
  //   agent.add(new Suggestion(`Suggestion`));
  //   agent.setContext({ name: 'weather', lifespan: 2, parameters: { city: 'Rome' }});
  // }

  // // Uncomment and edit to make your own Google Assistant intent handler
  // // uncomment `intentMap.set('your intent name here', googleAssistantHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function googleAssistantHandler(agent) {
  //   let conv = agent.conv(); // Get Actions on Google library conv instance
  //   conv.ask('Hello from the Actions on Google client library!') // Use Actions on Google library
  //   agent.add(conv); // Add Actions on Google library responses to your agent's response
  // }
  // // See https://github.com/dialogflow/fulfillment-actions-library-nodejs
  // // for a complete Dialogflow fulfillment library Actions on Google client library v2 integration sample

  // Run the proper function handler based on the matched Dialogflow intent name
  let intentMap = new Map();
  intentMap.set('Default Welcome Intent', welcome);
  intentMap.set('Default Fallback Intent', fallback);
  intentMap.set('Country Capital', countrycapital);
  // intentMap.set('your intent name here', googleAssistantHandler);
  agent.handleRequest(intentMap);
});
